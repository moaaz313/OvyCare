import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:ovacare/Core/Widgets/custom_app_bar.dart';
import 'package:table_calendar/table_calendar.dart';

import '../../../Core/themes/Colors/ColorsStyle.dart';
import 'LoadingScreen.dart';

class CycleHighlightsScreen extends StatelessWidget {
  final DateTime periodStartDate = DateTime(2025, 3, 18);
  final DateTime nextPeriodStartDate = DateTime(2025, 6, 9);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(
        title: "Cycle Tracking Highlights",
        useIconButton: true,
        backgroundColor: ColorStyle.pink,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 12.w, vertical: 10.h),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // WeekdaySelector(),
              PredictionSectionWidget(
                title: "Period Prediction",
                subtitle:
                    "Your period is likely to start on or around\n${_formatDate(periodStartDate)}.",
                highlightedDates: _generatePeriodDates(periodStartDate),
                month: 'March',
              ),
              SizedBox(height: 5.h,),
              PredictionSectionWidget(
                title: "Period Prediction",
                subtitle:
                    "Your period is likely to start on or around\n${_formatDate(nextPeriodStartDate)}.",
                highlightedDates: _generatePeriodDates(nextPeriodStartDate),
                month: 'June',
              ),
              SizedBox(height: 5.h,),
              Cycle()
            ],
          ),
        ),
      ),
    );
  }

  Widget PredictionSectionWidget({
    required String title,
    required String subtitle,
    required List<DateTime> highlightedDates,
    required String month,
  }) {
    return Card(
      elevation: 5,
      shape:
          RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.r)),
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w,vertical: 0.h),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(height: 16.h,),
            Row(
              children: [
                Icon(Icons.brightness_5, color: ColorStyle.purple),
                SizedBox(width: 8.w),
                Text(
                  title,
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 22.spMin,
                    color: ColorStyle.purple,
                  ),
                ),
              ],
            ),
            SizedBox(height: 8.h),
            Text(
              subtitle,
              style: TextStyle(
                fontSize: 16.spMin,
                color: Colors.black,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 16.h),

            // Calendar
            MiniCalendarWidget(highlightedDates, month),
          ],
        ),
      ),
    );
  }

  Widget MiniCalendarWidget(List<DateTime> highlightedDates, String month) {
    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: ['Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri']
              .map((day) =>
                  Text(day, style: TextStyle(fontWeight: FontWeight.bold)))
              .toList(),
        ),
        SizedBox(height: 8.h),
        GridView.builder(
          shrinkWrap: true,
          itemCount: 31,
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 7,
            crossAxisSpacing: 4,
            mainAxisSpacing: 4,
          ),
          itemBuilder: (context, index) {
            final date =
                DateTime(2025, highlightedDates.first.month, index + 1);
            final isHighlighted =
                highlightedDates.any((d) => d.day == date.day);

            return Container(
              decoration: BoxDecoration(
                color:
                    isHighlighted ? Colors.pink.shade200 : Colors.transparent,
                shape: BoxShape.circle,
              ),
              child: Center(
                child: Text(
                  '${index + 1}',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: isHighlighted ? Colors.white : Colors.black,
                  ),
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  // Generate list of predicted period dates
  List<DateTime> _generatePeriodDates(DateTime startDate) {
    return List.generate(7, (index) => startDate.add(Duration(days: index)));
  }

  // Format date as "18 March"
  String _formatDate(DateTime date) {
    return "${date.day} ${_monthName(date.month)}";
  }

  // Get month name from month number
  String _monthName(int month) {
    const monthNames = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];
    return monthNames[month - 1];
  }
}




  Widget Cycle() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12.r)),
      child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // _buildWeekSelector(),
              const SizedBox(height: 16),
              _buildCycleHistorySection(
                title: "Current Cycle: Started 25 Dec (19 days)",
                subtitle: "5-day period",
                activeDays: 5,
                totalDays: 19,
              ),
              const SizedBox(height: 16),
              _buildCycleHistorySection(
                title: "83 Days: 3 Oct â€“ 24 Dec",
                subtitle: "5-day period",
                activeDays: 5,
                totalDays: 20,
              ),
            ],
          ),
    );
  }

  // Build Week Selector Widget
  Widget _buildWeekSelector() {
    const days = ['T', 'F', 'S', 'S', 'M', 'T', 'W'];
    const selectedDayIndex = 2; // Highlighted day (Saturday)

    return Padding(
      padding: EdgeInsets.symmetric(vertical: 16.h, horizontal: 16.w),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: List.generate(days.length, (index) {
          final isSelected = index == selectedDayIndex;
          return Column(
            children: [
              Container(
                height: isSelected ? 50.h : 40.h,
                width: isSelected ? 50.h : 40.h,
                decoration: BoxDecoration(
                  color: isSelected ? Colors.white : Colors.grey.shade300,
                  shape: BoxShape.circle,
                ),
                child: Center(
                  child: Text(
                    days[index],
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: isSelected ? Colors.black : Colors.grey.shade800,
                      fontSize: isSelected ? 18.sp : 16.sp,
                    ),
                  ),
                ),
              ),
              if (isSelected)
                const Icon(Icons.arrow_drop_up, color: Colors.white),
            ],
          );
        }),
      ),
    );
  }

  // Build Cycle History Section
  Widget _buildCycleHistorySection({
    required String title,
    required String subtitle,
    required int activeDays,
    required int totalDays,
  }) {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 16.w),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16.sp,
              color: Colors.black,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            subtitle,
            style: TextStyle(
              fontSize: 14.sp,
              color: Colors.grey.shade600,
            ),
          ),
          const SizedBox(height: 16),
          Wrap(
            spacing: 4,
            runSpacing: 8,
            children: List.generate(totalDays, (index) {
              final isActive = index < activeDays;
              return Container(
                width: 12,
                height: 24,
                decoration: BoxDecoration(
                  color: isActive ? Colors.red : Colors.grey.shade300,
                  borderRadius: BorderRadius.circular(6),
                ),
              );
            }),
          ),
          SizedBox(height: 10.h,),
          Divider()
        ],
      ),
    );
  }
